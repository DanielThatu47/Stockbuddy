import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Share,
  Platform,
  StatusBar
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { LineChart } from 'react-native-chart-kit';
import { Dimensions } from 'react-native';
import * as PredictionService from '../services/predictionService';
import Colors from '../constants/colors';

const PredictionDetailsScreen = ({ route, navigation }) => {
  const { id } = route.params;
  const [prediction, setPrediction] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadPredictionDetails();
  }, []);

  const loadPredictionDetails = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await PredictionService.getPredictionById(id);
      setPrediction(data);
    } catch (err) {
      setError('Failed to load prediction details. Please try again.');
      console.error('Error loading prediction details:', err);
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed':
        return '#4caf50';
      case 'pending':
      case 'running':
        return '#ff9800';
      case 'failed':
      case 'stopped':
        return '#f44336';
      default:
        return '#757575';
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
  };

  const sharePrediction = async () => {
    if (!prediction) return;
    
    try {
      const message = `Stock Prediction for ${prediction.symbol}\n\n` +
        `Prediction Period: ${prediction.daysAhead} days\n` +
        `Created: ${formatDate(prediction.createdAt)}\n\n` +
        `Predicted Prices:\n${prediction.predictions.map(p => 
          `${p.date}: $${p.price.toFixed(2)}`
        ).join('\n')}\n\n` +
        `Generated by StockSenseAI`;
      
      await Share.share({
        message,
        title: `${prediction.symbol} Stock Prediction`
      });
    } catch (error) {
      console.error('Error sharing prediction:', error);
    }
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor={Colors.primary} />
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="arrow-back" size={24} color="white" />
          </TouchableOpacity>
          <Text style={styles.headerText}>Prediction Details</Text>
        </View>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={Colors.primary} />
          <Text style={styles.loadingText}>Loading prediction details...</Text>
        </View>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor={Colors.primary} />
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="arrow-back" size={24} color="white" />
          </TouchableOpacity>
          <Text style={styles.headerText}>Prediction Details</Text>
        </View>
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>{error}</Text>
          <TouchableOpacity 
            style={styles.retryButton}
            onPress={loadPredictionDetails}
          >
            <Text style={styles.retryButtonText}>Retry</Text>
          </TouchableOpacity>
        </View>
      </View>
    );
  }

  if (!prediction) {
    return (
      <View style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor={Colors.primary} />
        <View style={styles.header}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={() => navigation.goBack()}
          >
            <Ionicons name="arrow-back" size={24} color="white" />
          </TouchableOpacity>
          <Text style={styles.headerText}>Prediction Details</Text>
        </View>
        <View style={styles.errorContainer}>
          <Text style={styles.errorText}>Prediction not found</Text>
        </View>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={Colors.primary} />
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Ionicons name="arrow-back" size={24} color="white" />
        </TouchableOpacity>
        <Text style={styles.headerText}>Prediction Details</Text>
        <TouchableOpacity 
          style={styles.shareButton}
          onPress={sharePrediction}
        >
          <Ionicons name="share-outline" size={24} color="white" />
        </TouchableOpacity>
      </View>
      
      <ScrollView contentContainerStyle={styles.content}>
        <View style={styles.card}>
          <View style={styles.cardHeader}>
            <Text style={styles.symbolText}>{prediction.symbol}</Text>
            <View style={[styles.statusBadge, { backgroundColor: getStatusColor(prediction.status) }]}>
              <Text style={styles.statusText}>{prediction.status}</Text>
            </View>
          </View>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Prediction Period:</Text>
            <Text style={styles.detailValue}>{prediction.daysAhead} days</Text>
          </View>
          
          <View style={styles.detailRow}>
            <Text style={styles.detailLabel}>Created:</Text>
            <Text style={styles.detailValue}>{formatDate(prediction.createdAt)}</Text>
          </View>
        </View>
        
        {prediction.predictions && prediction.predictions.length > 0 && (
          <View style={styles.card}>
            <Text style={styles.cardTitle}>Price Predictions</Text>
            
            <View style={styles.chartContainer}>
              <LineChart
                data={{
                  labels: prediction.predictions.map(p => p.date.substring(5)),
                  datasets: [{
                    data: prediction.predictions.map(p => p.price)
                  }]
                }}
                width={Dimensions.get('window').width - 40}
                height={220}
                chartConfig={{
                  backgroundColor: Colors.primary,
                  backgroundGradientFrom: Colors.primary,
                  backgroundGradientTo: '#4680cc',
                  decimalPlaces: 2,
                  color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
                  labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
                  style: {
                    borderRadius: 16
                  },
                  propsForDots: {
                    r: '6',
                    strokeWidth: '2',
                    stroke: '#ffa726'
                  }
                }}
                bezier
                style={styles.chart}
              />
            </View>
            
            <View style={styles.priceTable}>
              <View style={styles.tableHeader}>
                <Text style={styles.tableHeaderText}>Date</Text>
                <Text style={styles.tableHeaderText}>Predicted Price</Text>
              </View>
              
              {prediction.predictions.map((p, index) => (
                <View 
                  key={index} 
                  style={[
                    styles.tableRow, 
                    index % 2 === 0 ? styles.evenRow : null
                  ]}
                >
                  <Text style={styles.tableCell}>{p.date}</Text>
                  <Text style={styles.tableCell}>{p.price.toFixed(2)}</Text>
                </View>
              ))}
            </View>
          </View>
        )}
        
        {prediction.sentiment && (
          <View style={styles.card}>
            <Text style={styles.cardTitle}>Sentiment Analysis</Text>
            
            <View style={styles.sentimentData}>
              <View style={styles.sentimentItem}>
                <Text style={styles.sentimentLabel}>Positive</Text>
                <Text style={[styles.sentimentValue, { color: '#4caf50' }]}>
                  {prediction.sentiment.totals.positive || 0}
                </Text>
              </View>
              
              <View style={styles.sentimentItem}>
                <Text style={styles.sentimentLabel}>Neutral</Text>
                <Text style={[styles.sentimentValue, { color: '#ff9800' }]}>
                  {prediction.sentiment.totals.neutral || 0}
                </Text>
              </View>
              
              <View style={styles.sentimentItem}>
                <Text style={styles.sentimentLabel}>Negative</Text>
                <Text style={[styles.sentimentValue, { color: '#f44336' }]}>
                  {prediction.sentiment.totals.negative || 0}
                </Text>
              </View>
            </View>
            
            {prediction.sentiment.summary && (
              <Text style={styles.sentimentSummary}>
                {prediction.sentiment.summary}
              </Text>
            )}
          </View>
        )}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: Colors.primary,
    paddingTop: Platform.OS === 'ios' ? 50 : 25,
    paddingBottom: 15,
    paddingHorizontal: 20,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  backButton: {
    marginRight: 15,
  },
  headerText: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
    flex: 1,
  },
  shareButton: {
    marginLeft: 15,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#555',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  errorText: {
    fontSize: 16,
    color: '#d32f2f',
    textAlign: 'center',
    marginBottom: 15,
  },
  retryButton: {
    backgroundColor: Colors.primary,
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
  },
  retryButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  content: {
    padding: 15,
    paddingBottom: 30,
  },
  card: {
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 3,
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  symbolText: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#333',
  },
  statusBadge: {
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 12,
  },
  statusText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  detailLabel: {
    fontSize: 16,
    color: '#555',
  },
  detailValue: {
    fontSize: 16,
    color: '#333',
    fontWeight: '500',
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  chartContainer: {
    alignItems: 'center',
    marginBottom: 15,
  },
  chart: {
    borderRadius: 16,
  },
  priceTable: {
    marginTop: 10,
  },
  tableHeader: {
    flexDirection: 'row',
    backgroundColor: '#f5f5f5',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderTopLeftRadius: 5,
    borderTopRightRadius: 5,
  },
  tableHeaderText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#555',
    flex: 1,
  },
  tableRow: {
    flexDirection: 'row',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  evenRow: {
    backgroundColor: '#fafafa',
  },
  tableCell: {
    fontSize: 14,
    color: '#333',
    flex: 1,
  },
  sentimentData: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 20,
  },
  sentimentItem: {
    alignItems: 'center',
  },
  sentimentLabel: {
    fontSize: 14,
    color: '#555',
    marginBottom: 5,
  },
  sentimentValue: {
    fontSize: 22,
    fontWeight: 'bold',
  },
  sentimentSummary: {
    fontSize: 14,
    color: '#555',
    lineHeight: 20,
  },
});

export default PredictionDetailsScreen;